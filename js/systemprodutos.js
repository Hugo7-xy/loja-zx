import { firestore } from './app.js'; import { createSlug } from './utils.js'; import { handleRouting } from './layout.js';
const productGrid = document.getElementById('product-grid'); const supplierFilter = document.querySelector('.supplier-filter'); let allProducts = []; let allSellers = [];
function renderSellerFilters(sortedSellers) { let filtersHTML = `<li><a href="/" class="supplier-link" data-supplier="all">Todos os Vendedores</a></li>`; sortedSellers.forEach(seller => { const slug = createSlug(seller.name); filtersHTML += `<li><a href="/vendedor/${slug}" class="supplier-link" data-supplier="${seller.name}">${seller.name}</a></li>`; }); supplierFilter.innerHTML = filtersHTML; handleRouting(); }
function renderProducts(products) { productGrid.innerHTML = ''; if (products.length === 0) { productGrid.innerHTML = '<p>Nenhum produto encontrado.</p>'; return; } products.forEach(product => { const videoUrl = product.link_video_youtube || ''; let videoId = ''; if (videoUrl.includes('youtu.be/')) { videoId = videoUrl.split('youtu.be/')[1].split('?')[0]; } else if (videoUrl.includes('watch?v=')) { videoId = videoUrl.split('watch?v=')[1].split('&')[0]; } else { videoId = videoUrl.split('/embed/')[1]?.split('?')[0] || ''; } const embedUrl = `https://www.youtube.com/embed/${videoId}`; const productCardHTML = `<div class="product-card"><iframe src="${embedUrl}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><div class="card-content"><h3>${product.titulo}</h3><p class="description">${product.descricao}</p><p class="price">R$ ${product.preco}</p><a href="https://wa.me/${product.telefone_vendedor}?text=Olá, tenho interesse no produto: ${product.titulo}" target="_blank" class="whatsapp-button"><i class="fab fa-whatsapp"></i> Comprar</a></div></div>`; productGrid.innerHTML += productCardHTML; }); }
function filterAndRender(supplierName) { supplierFilter.querySelectorAll('a').forEach(link => { if (link.dataset.supplier === supplierName) { link.parentElement.classList.add('active'); } else { link.parentElement.classList.remove('active'); } }); if (supplierName === 'all') { renderProducts(allProducts); } else { const filteredProducts = allProducts.filter(product => product.fornecedor === supplierName); renderProducts(filteredProducts); } }
function setupFilters() { supplierFilter.addEventListener('click', (event) => { const link = event.target.closest('.supplier-link'); if (link) { event.preventDefault(); const path = link.getAttribute('href'); history.pushState({}, '', path); handleRouting(); } }); }
function processAndRenderLists() { const latestPostTimes = {}; allProducts.forEach(product => { const createdAt = product.data_criacao?.toDate ? product.data_criacao.toDate() : new Date(0); const sellerName = product.fornecedor; if (!latestPostTimes[sellerName] || createdAt > latestPostTimes[sellerName]) { latestPostTimes[sellerName] = createdAt; } }); const sortedSellers = [...allSellers].sort((a, b) => { const timeA = latestPostTimes[a.name] || new Date(0); const timeB = latestPostTimes[b.name] || new Date(0); return timeB - timeA; }); renderSellerFilters(sortedSellers); }
export function initSystemProdutos() { console.log("Sistema de Produtos (com ordenação dinâmica) inicializado."); let productsLoaded = false; let sellersLoaded = false; firestore.collection("sellers").onSnapshot((snapshot) => { allSellers = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); sellersLoaded = true; if (productsLoaded) processAndRenderLists(); }, (error) => console.error("Erro ao buscar vendedores:", error)); firestore.collection("produtos").where("disponivel", "==", true).onSnapshot((snapshot) => { allProducts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); productsLoaded = true; document.dispatchEvent(new CustomEvent('productsLoaded')); if (sellersLoaded) processAndRenderLists(); }, (error) => console.error("Erro ao buscar produtos:", error)); document.addEventListener('routeToVendor', (event) => { const slug = event.detail.slug; if (slug === 'all') { filterAndRender('all'); } else { const seller = allSellers.find(s => createSlug(s.name) === slug); if (seller) { filterAndRender(seller.name); } else { filterAndRender('all'); } } }); setupFilters(); }
